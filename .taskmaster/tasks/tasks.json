{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 저장소 설정",
        "description": "Unity 2023 프로젝트 저장소를 버전 관리와 기본 폴더 구조로 초기화합니다.",
        "details": "새로운 Unity 2023 프로젝트를 생성합니다. Unity용 .gitignore와 함께 Git 저장소를 설정합니다. 스크립트, 에셋, 씬, 프리팹, 문서용 폴더를 구성합니다.",
        "testStrategy": "저장소에 접근 가능하고, Unity 프로젝트가 오류 없이 열리며, 폴더 구조가 존재하는지 확인합니다.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "핵심 Unity 패키지 임포트",
        "description": "VR/PC 개발을 위한 필수 Unity 패키지를 임포트합니다.",
        "details": "Input System, XR Interaction Toolkit, Photon 2 패키지를 Unity 패키지 매니저로 설치합니다. VR/PC 호환을 위한 프로젝트 설정을 구성합니다.",
        "testStrategy": "모든 패키지가 설치되고 프로젝트 설정이 올바르게 구성되었는지 확인합니다.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "3D 환경 에셋 디자인 및 임포트",
        "description": "게임을 위한 3D 집 환경 에셋을 제작 또는 임포트합니다.",
        "details": "집 내부와 외부의 3D 모델을 디자인하거나 확보합니다. Unity에 임포트하고, 머티리얼, 라이팅, 기본 콜리전을 설정합니다.",
        "testStrategy": "에셋이 Unity 씬에 잘 보이고, 라이팅과 콜리전이 정상 동작하는지 확인합니다.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "3D 모델 확보/제작",
            "description": "3D 모델을 직접 제작하거나 외부 소스에서 확보합니다. 모델링 툴(Blender, Maya 등)을 사용해 메시 생성 및 최적화 작업을 수행합니다.",
            "dependencies": [],
            "details": "메시 분할, 폴리곤 최적화, UV 언랩핑 등 모델링 핵심 작업 수행",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "에셋 임포트",
            "description": "Unity 프로젝트에 3D 모델 파일을 임포트합니다. FBX, OBJ 등 형식에 맞게 임포트 설정을 조정합니다.",
            "dependencies": [
              1
            ],
            "details": "메시, 애니메이션, 텍스처 임포트 설정 확인, 유니티 호환성 검증",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "머티리얼 적용",
            "description": "임포트된 모델에 머티리얼을 적용합니다. 텍스처 매핑 및 쉐이더 설정을 최적화합니다.",
            "dependencies": [
              2
            ],
            "details": "텍스처 UV 매핑, 머티리얼 프로퍼티 조정, 쉐이더 선택 및 파라미터 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "라이팅 설정",
            "description": "유니티 씬에 적절한 라이팅 시스템을 구축합니다. 조명 유형과 환경 설정을 최적화합니다.",
            "dependencies": [
              3
            ],
            "details": "디렉셔널/포인트/스포트 라이트 배치, HDRP/URP 설정, 글로벌 일루미네이션 적용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "콜리전 설정 및 테스트",
            "description": "콜리전 메시를 설정하고 물리 엔진 테스트를 수행합니다. 최종 검증을 통해 문제점을 수정합니다.",
            "dependencies": [
              4
            ],
            "details": "콜리전 메시 생성, 물리 시뮬레이션 테스트, 성능 프로파일링 및 최적화",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "1인칭 컨트롤러(VR/PC) 구현",
        "description": "VR과 PC 입력을 모두 지원하는 1인칭 컨트롤러를 개발합니다.",
        "details": "Input System과 XR Interaction Toolkit을 활용해 기본 컨트롤러를 만듭니다. PC는 키보드/마우스, VR은 손 추적/컨트롤러를 지원합니다. 부드러운 이동과 카메라 제어를 보장합니다.",
        "testStrategy": "VR과 PC 모드 모두에서 이동과 카메라가 정상 동작하는지, 입력 전환이 잘 되는지 테스트합니다.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "PC 입력 컨트롤러 구현",
            "description": "키보드/마우스 입력 처리 로직 구현 및 이벤트 핸들링",
            "dependencies": [],
            "details": "키 입력 이벤트, 마우스 이동/클릭 처리, 입력 매핑 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "VR 입력 컨트롤러 구현",
            "description": "VR 컨트롤러 트리거/버튼 입력 처리 및 상호작용 로직 구현",
            "dependencies": [],
            "details": "트리거 터치/프레스 이벤트, 버튼 입력 매핑, XR Interaction Toolkit 활용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "입력 전환 로직",
            "description": "PC ↔ VR 입력 방식 자동/수동 전환 시스템 구축",
            "dependencies": [
              1,
              2
            ],
            "details": "입력 장치 감지 알고리즘, 컨텍스트 전환 매커니즘, 입력 우선순위 관리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "이동/카메라 제어",
            "description": "입력 방식별 이동/카메라 제어 로직 통합 구현",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "PC: WASD + 마우스 룩, VR: 컨트롤러 이동/회전, 카메라 제어 매핑",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "통합 테스트",
            "description": "모든 입력 시스템 통합 테스트 및 버그 수정",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "크로스 플랫폼 테스트, 입력 충돌 검증, 성능 최적화",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "오브젝트 상호작용 시스템 개발",
        "description": "VR/PC용 핵심 오브젝트 상호작용 메커니즘을 구현합니다.",
        "details": "오브젝트를 집기, 놓기, 던지기 위한 스크립트를 만듭니다. VR은 손 추적, PC는 마우스/키보드를 지원합니다. 상호작용 가능한 오브젝트는 하이라이트 처리합니다.",
        "testStrategy": "VR과 PC 모두에서 오브젝트 상호작용이 잘 되고, 하이라이트와 물리 효과가 정상인지 확인합니다.",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "집기/놓기/던지기 스크립트 구현",
            "description": "오브젝트의 물리적 상호작용을 위한 핵심 스크립트 개발",
            "dependencies": [],
            "details": "XR Interaction Toolkit 활용, Attach Point 설정, 물리 엔진 연동",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "VR 입력 상호작용 시스템 구축",
            "description": "VR 컨트롤러를 통한 입력 처리 메커니즘 구현",
            "dependencies": [
              1
            ],
            "details": "XR Simple Interactable 이벤트 연결, 컨트롤러 트리거 동작 매핑",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "PC 입력 상호작용 시스템 구축",
            "description": "키보드/마우스 입력을 위한 대체 입력 시스템 개발",
            "dependencies": [
              1
            ],
            "details": "Input System 패키지 활용, 마우스 클릭/드래그 이벤트 처리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "오브젝트 하이라이트 기능 추가",
            "description": "선택된 오브젝트 시각적 강조 표시 구현",
            "dependencies": [
              2,
              3
            ],
            "details": "Material 색상 변경, UI 텍스트 표시, Raycast 기반 선택 표시",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "물리 효과 적용 및 최적화",
            "description": "던지기 동작에 대한 물리 시뮬레이션 구현",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Rigidbody 설정, Joint 제약 조건, 충돌 감지 로직",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "통합 테스트 및 버그 수정",
            "description": "모든 시스템의 상호작용 테스트 및 안정성 검증",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "크로스 플랫폼 테스트, 입력 충돌 방지, 성능 프로파일링",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "게임 시작 시퀀스 및 튜토리얼 개발",
        "description": "게임 시작 시퀀스와 기본 조작 튜토리얼을 만듭니다.",
        "details": "인트로 시퀀스와 조작/상호작용 튜토리얼을 설명합니다. 최소 UI와 환경적 스토리텔링을 활용합니다.",
        "testStrategy": "시퀀스 흐름, 튜토리얼의 명확성, UI 통합을 테스트합니다.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "인트로 시퀀스 구현",
            "description": "사용자의 첫 경험을 위한 시각적/상호작용적 인트로 화면 설계 및 구현",
            "dependencies": [],
            "details": "사용자의 조작키와 오브젝트 상호작용을 시각적으로 알 수 있게 하는 프로젝트 구성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "조작 튜토리얼 설계",
            "description": "기본 기능 조작법을 단계별로 안내하는 인터랙티브 튜토리얼 개발",
            "dependencies": [
              1
            ],
            "details": "튜토리얼에 사용할 UI 요소를 설계하고 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "UI 통합",
            "description": "인트로/튜토리얼/기능 UI 요소를 일관된 디자인 시스템으로 통합",
            "dependencies": [
              1,
              2
            ],
            "details": "인트로/튜토리얼/기능 UI 요소를 일관된 디자인 시스템으로 통합합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "흐름 및 명확성 테스트",
            "description": "사용자 경험 흐름 검증 및 인터페이스 명확성 개선",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "사용자 테스트 세션 진행 → 피드백 기반 개선 → 최종 사용자 경험 검증",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "첫 번째 협동 퍼즐 스테이지 구현",
        "description": "거울/프리즘 동시 조작과 빛의 경로 안내 협동 기믹을 결합한 스테이지를 구현합니다.",
        "details": "두 명의 플레이어가 각자 다른 위치에서 거울이나 프리즘을 조작해야만 빛이 목표 지점까지 도달할 수 있도록 설계합니다. 한 명이 각도를 맞추고, 다른 한 명이 타이밍에 맞춰 스위치를 눌러야 빛이 통과하는 동시 행동 퍼즐과, 한 명이 전체 구조(빛의 경로)를 관찰하며 다른 한 명에게 실시간으로 지시하는 협동 퍼즐을 결합합니다. 1기믹 해결 시 힌트 제공, 2기믹 해결 시 다음 스테이지로 이동하는 일련의 과정을 포함합니다.",
        "testStrategy": "두 명이 협동하여 퍼즐을 해결할 수 있는지, 각 기믹별 힌트 제공 및 스테이지 전환이 정상 동작하는지 테스트합니다.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "퍼즐 환경 및 오브젝트 배치",
            "description": "거울, 프리즘, 색상 필터, 스위치 등 주요 오브젝트를 Unity 씬에 배치하고 상호작용 컴포넌트 설정",
            "details": "플레이어가 조작할 수 있는 거울, 프리즘, 색상 필터, 스위치 등 오브젝트를 적절한 위치에 배치하고, 각 오브젝트에 상호작용 스크립트 및 네트워크 동기화 설정",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "거울/프리즘 협동 반사 레이저 퍼즐 시스템 구현",
            "description": "두 명이 각자 거울, 어항, TV 등 다양한 오브젝트를 조작하여 레이저 빔을 목표 센서에 정확히 반사시키는 협동 퍼즐 구현. 각 오브젝트의 상태와 각도, 프리즘/필터 조합에 따라 경로가 실시간으로 변함., 성공 시 여러 프리즘 재료(색상 필터 등) 획득 트리거 구현.",
            "dependencies": [1],
            "details": "라인 렌더러로 레이저 경로 시각화, RaycastNonAlloc로 효율적 충돌 처리, 오브젝트별 반사/굴절 특성 구현, 실시간 네트워크 동기화, 플레이어 신체 충돌 시 레이저 차단 등 협동성 강화, 성공 시 여러 프리즘 재료(색상 필터 등) 획득 트리거, 실패 시 피드백 제공",
            "status": "pending",
            "testStrategy": "두 명이 협동하지 않으면 퍼즐이 풀리지 않는지, 성공 시 여러 프리즘 재료가 제공되는지 테스트"
          },
          {
            "id": 3,
            "title": "색상 조합 협동 퍼즐 구현",
            "description": "각 플레이어가 서로 다른 색상의 필터(예: 빨강, 파랑)를 들고 정해진 위치에 서서 빛을 통과시키면, 두 색이 합쳐져 특정 색(예: 보라)이 생성되어 문이 열리는 협동 퍼즐 구현. 색상 조합 순서와 위치를 맞추기 위해 플레이어 간 소통이 필요.",
            "dependencies": [2],
            "details": "플레이어가 획득한 색상 필터를 각자 들고 지정된 위치에 서서 빛을 통과시키면, 두 색상이 합쳐져 목표 색상이 생성됨. 올바른 색상 조합과 위치, 타이밍이 맞아야 문이 열림. 잘못된 조합/위치/타이밍에는 피드백 제공.",
            "status": "pending",
            "testStrategy": "두 명이 소통하며 올바른 색상 조합과 위치를 맞춰야 퍼즐이 풀리는지, 성공 시 문이 열리는지 테스트"
          },
          {
            "id": 4,
            "title": "힌트 제공 및 UI/피드백 시스템 구현",
            "description": "기믹 해결 시 대화 UI 제공, 실시간 피드백 및 결과 화면 제공",
            "dependencies": [3],
            "details": "힌트 팝업, 사운드, 이펙트 등 다양한 피드백 요소 구현",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "퍼즐 통합 테스트 및 디버깅",
            "description": "전체 퍼즐 스테이지의 통합 동작 및 네트워크 협동성 테스트",
            "dependencies": [4],
            "details": "여러 플레이어가 실제로 협동하여 퍼즐을 해결할 수 있는지, 각 기믹별 힌트 제공 및 스테이지 전환이 정상 동작하는지 통합 테스트 및 디버깅",
            "status": "pending"
          }
        ]
      },
      {
        "id": 8,
        "title": "Arrow-Order 다중 시야 협동 퍼즐 스테이지 구현",
        "description": "서로 다른 공간에서 플레이어가 시야각과 거리를 맞춰 숨겨진 숫자혹은 방향을 확인하고, 정보를 간접 UI(힌트 요청/응답)로 교환하여 6자리 다이얼락을 푸는 협동 퍼즐 스테이지를 구현합니다.",
        "details": "각 방에 화살표(불을 꺼야 보임), Parallax+Stencil 셰이더로 숨겨진 숫자혹은 방향, 시야각+거리 트리거, 3자리 다이얼락 등 Arrow-Order 퍼즐 기믹을 구현. 플레이어는 직접 볼 수 없는 정보를 간접 UI(모니터)로 교환해야만 정답을 맞출 수 있음. Photon 네트워크 동기화 필수.",
        "priority": "high",
        "dependencies": [7],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Arrow-Order 퍼즐 환경 및 오브젝트 배치",
            "description": "각 방에 화살표, 벽, 스텐실, 다이얼락, 모니터 ,버튼 등 주요 오브젝트를 Unity 씬에 배치하고, Parallax+Stencil 셰이더 적용",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "불 끄면 보이는 화살표 및 숫자 숨김 구현",
            "description": "URP/Unlit+Emission 머티리얼, LightSwitch.cs, Stencil 셰이더로 평상시엔 숫자 숨김, 불을 꺼야 화살표와 숫자가 보이도록 구현",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "시야각+거리 기반 숫자 노출 시스템 구현",
            "description": "AngleReveal.cs로 HMD 위치와 시야각을 체크, 올바른 각도/거리에서만 숫자가 노출되도록 구현. 순서 체크 및 멀미 방지 로직 포함",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "간접 UI 기반 힌트 교환 시스템 구현",
            "description": "획득한 단서를 모니터 UI를 통해 입력하면 해당 정보가 상대방 모니터에도 공유되는 UI/네트워크 시스템 구현. PhotonView.RPC로 동기화",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "3자리 다이얼락 및 정답 체크",
            "description": "DialLock.cs로 6자리 숫자+문자 입력, 정답 입력 시 문 열림 및 퍼즐 클리어. 네트워크 동기화 및 피드백 포함",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "통합 테스트 및 QA",
            "description": "멀티플레이 협동성, 성능, 버그, 힌트/피드백, 네트워크 동기화 등 전체 시스템 통합 테스트 및 디버깅",
            "status": "pending"
          }
        ]
      },
      {
        "id": 9,
        "title": "Player 개별 퍼즐 스테이지 구현",
        "description": "Stage 분리 후 각 Player 별 퍼즐 스테이지를 구현합니다.",
        "details": "파일 탐색을 위한 2D 데스크탑 UI를 디자인/스크립트화합니다. 스토리 요소를 드러내는 진상 파일을 구현합니다.",
        "testStrategy": "UI 탐색, 파일 접근, 스토리 노출이 잘 되는지 테스트합니다.",
        "priority": "medium",
        "dependencies": [
          6,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Player 에게 단서를 주는 시스템 구성",
            "description": "화면 레이아웃 ( 어떻게 배치할지 ) , 컴포넌트 배치 (사진이나 일기 , 기록 등 ) , 사용자 인터랙션 흐름 설계",
            "dependencies": [],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "파일 시스템 구현",
            "description": "스토리 데이터 저장 구조 설계 및 파일 접근 메커니즘 구축",
            "dependencies": [
              1
            ],
            "details": "데이터 의존성 관리 및 파일 시스템 아키텍처 설계. UI 요구사항에 맞는 저장소 구조 구현",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "단일 엔딩 시퀀스 구현",
        "description": "최초 단일 엔딩 시퀀스를 만듭니다.",
        "details": "최종 스테이지 도착 시 트리거되는 엔딩 시퀀스를 스크립트화합니다. 최소 UI와 환경적 연출을 사용합니다.",
        "testStrategy": "엔딩 트리거, 시퀀스 흐름, UI 통합을 테스트합니다.",
        "priority": "medium",
        "dependencies": [
          7,
          10
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "엔딩 트리거 구현",
            "description": "플레이어와 트리거 박스의 Overlap 이벤트를 처리하고 게임 종료 조건을 확인하는 로직 구현",
            "dependencies": [],
            "details": "트리거 박스 생성 → Overlap 이벤트 핸들러 구현 → 게임 종료 조건 검사 → 레벨 전환 로직 연결",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "시퀀스 연출",
            "description": "엔딩 트리거 활성화 시 발생하는 시각적/음향적 연출 요소 구현",
            "dependencies": [
              1
            ],
            "details": "카메라 애니메이션 → UI 전환 효과 → 배경 음악 변경 → 엔딩 애니메이션 구현",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "UI 통합",
            "description": "엔딩 UI 컴포넌트를 게임 로직에 통합하고 사용자 상호작용 처리",
            "dependencies": [
              1
            ],
            "details": "엔딩 UI 위젯 제작 → 버튼 클릭 이벤트 핸들러 구현 → UI-게임 로직 연결 → 사용자 피드백 시스템 구축",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "흐름 테스트",
            "description": "엔딩 트리거 → 시퀀스 → UI 통합 → 종료까지의 전체 흐름 검증",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "조건 충족 시 엔딩 트리거 작동 테스트 → 시퀀스 연출 타이밍 검증 → UI 반응성 테스트 → 종료 프로세스 검증",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "Photon 2 멀티플레이 서버 설정",
        "description": "멀티플레이 지원을 위해 Photon 2를 구성합니다.",
        "details": "Photon 2 SDK를 통합하고, 기본 방 생성, 참가, 플레이어 동기화를 설정합니다.",
        "testStrategy": "방 생성, 참가, 기본 플레이어 동기화가 잘 되는지 테스트합니다.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Photon 2 SDK 통합",
            "description": "Photon Server SDK 설치 및 프로젝트 설정",
            "dependencies": [],
            "details": "PhotonServerSettings 구성, AppId 설정, 네임 서버 옵션 조정, 자체 호스팅 서버 연결 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "방 생성/참가 구현",
            "description": "멀티플레이어 방 관리 시스템 구축",
            "dependencies": [
              1
            ],
            "details": "CreateRoom/JoinRoom API 구현, 방 속성 설정, 플레이어 매칭 로직, 연결 상태 핸들링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "플레이어 동기화",
            "description": "네트워크 객체 상태 동기화 시스템 개발",
            "dependencies": [
              1,
              2
            ],
            "details": "PhotonView 컴포넌트 설정, IPunObservable 인터페이스 구현, OnPhotonSerializeView 메서드 최적화, 위치/속도 데이터 스트리밍",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 12,
        "title": "멀티플레이 오브젝트 동기화 구현",
        "description": "멀티플레이 게임플레이를 위한 오브젝트 동기화를 추가합니다.",
        "details": "Photon 2를 활용해 오브젝트 상호작용 시스템을 확장, 오브젝트 상태를 클라이언트 간 동기화합니다.",
        "testStrategy": "멀티플레이에서 오브젝트 동기화가 일관성 있게 동작하는지 테스트합니다.",
        "priority": "medium",
        "dependencies": [
          5,
          12
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "오브젝트 상태 동기화 로직",
            "description": "멀티플레이어 환경에서 게임 오브젝트의 위치, 회전, 변수 값을 네트워크를 통해 동기화하는 로직 구현",
            "dependencies": [],
            "details": "Network Identity/Network Transform 컴포넌트 활용, 서버-클라이언트 권한 분리, 트래픽 최적화 ( 오브젝트 동기화 시스템 선행 필요 )",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "상호작용 시스템 확장",
            "description": "플레이어 간 물리적/논리적 상호작용 시스템 확장 및 네트워크 동기화",
            "dependencies": [
              1
            ],
            "details": "이벤트 기반 상호작용 처리, 충돌 감지 시스템 통합, 동기화된 애니메이션 상태 관리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "네트워크 이벤트 처리",
            "description": "사용자 입력/게임 이벤트를 네트워크 패킷으로 변환 및 처리 시스템 구축",
            "dependencies": [
              1,
              2
            ],
            "details": "이벤트 큐 관리, 패킷 전송 최적화, 에러 핸들링 메커니즘",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "일관성 테스트",
            "description": "클라이언트-서버 간 데이터 일관성 검증 및 동기화 오류 디버깅",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "상태 차이 감지 알고리즘, 자동화 테스트 케이스, 로그 기반 문제 추적",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "통합 검증",
            "description": "모든 시스템 통합 후 성능/안정성 검증 및 최종 배포 준비",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "부하 테스트, 크로스 플랫폼 검증, 네트워크 지연 시나리오 테스트[2][4]",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 13,
        "title": "추가 퍼즐 메커니즘 개발",
        "description": "새로운 퍼즐 메커니즘과 스테이지를 추가합니다.",
        "details": "RFID 슬롯, 벽 두드리기 등 추가 퍼즐을 디자인/스크립트화하고 기존 시스템과 통합합니다.",
        "testStrategy": "새 퍼즐 논리와 통합이 잘 동작하는지 테스트합니다.",
        "priority": "low",
        "dependencies": [
          7,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "UI/UX 시스템 구현",
        "description": "게임 내 사용자 인터페이스와 사용자 경험을 설계하고 구현합니다.",
        "details": "메뉴 시스템, 설정 화면, 인게임 UI 요소들을 디자인하고 구현합니다. 접근성과 사용 편의성을 고려합니다.",
        "testStrategy": "UI 요소들의 반응성, 접근성, 사용자 흐름이 직관적인지 테스트합니다.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "메뉴 시스템 설계",
            "description": "게임의 핵심 메뉴 구조와 네비게이션 흐름을 설계합니다. 사용자 유형 분석을 기반으로 주요 기능 접근성과 정보 계층을 정의합니다[1][2].",
            "dependencies": [],
            "details": "메뉴 트리 구조, 사용자 역할별 접근 권한, 시각적 계층화 방식",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "설정 화면 구현",
            "description": "사용자 설정 화면의 UI/UX를 구현합니다. 접근성 요소(텍스트 크기 조절, 음성 안내)를 반영한 인터페이스 설계[2][3].",
            "dependencies": [
              1
            ],
            "details": "화면 레이아웃, 입력 필드 타입, 저장/초기화 기능",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "인게임 UI 요소 개발",
            "description": "게임 내 HUD, 팝업, 알림 시스템 등 핵심 UI 요소를 개발합니다. 데이터 참조 방식을 활용한 효율적 구현[3].",
            "dependencies": [
              1,
              2
            ],
            "details": "UI 컴포넌트 재사용, 애니메이션 트리거, 상태 표시기",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "접근성 적용",
            "description": "모든 UI 요소에 접근성 기능을 통합합니다. 키보드 네비게이션, 스크린 리더 지원, 대체 텍스트 구현[2].",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "A11Y 표준 준수, 색상 대비 검증, 터치 타겟 크기",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "사용자 흐름 테스트",
            "description": "사용자 테스트를 통해 UI/UX 개선점을 도출합니다. 학습성, 효율성, 오류율 측정[2].",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "유스케이스 시나리오 작성, 사용자 피드백 수집, 개선 이슈 트래킹",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 15,
        "title": "게임 상태 관리 시스템 구현",
        "description": "게임 진행 상황 저장 및 불러오기 시스템을 구현합니다.",
        "details": "플레이어 진행 상황, 퍼즐 해결 상태, 설정 정보를 저장하고 불러오는 시스템을 구현합니다.",
        "testStrategy": "저장/불러오기 기능이 정상 동작하고, 데이터 무결성이 보장되는지 테스트합니다.",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "진행 상황 저장 로직 구현",
            "description": "게임 진행 중의 시간, 이동 횟수, 현재 상태를 저장하는 메커니즘 설계 및 구현",
            "dependencies": [],
            "details": "타이머 데이터,게임 상태 객체를 직렬화/역직렬화 처리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "엔딩 상태 저장 시스템 개발",
            "description": "엔딩 조건 및 플레이어 행동 이력을 저장하는 데이터 구조 설계",
            "dependencies": [],
            "details": "엔딩 조건 객체, 플레이어 행동 이력 객체, 저장 포맷 표준화",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "불러오기 기능 통합",
            "description": "저장된 데이터를 기반으로 게임 상태 복구 및 설정 적용 기능 구현",
            "dependencies": [
              1,
              2
            ],
            "details": "데이터 검증 로직, 상태 재구성 알고리즘, 설정 적용 파이프라인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "데이터 무결성 테스트 구축",
            "description": "저장/불러오기 과정에서 발생할 수 있는 데이터 오류 검증 테스트 케이스 개발",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "데이터 손상 시나리오 테스트, 형식 검증, 상태 일관성 검사",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 16,
        "title": "아트 및 사운드 자산 고도화",
        "description": "몰입감을 위한 아트 및 사운드 자산을 업그레이드합니다.",
        "details": "고품질 아트, 사운드 이펙트, 음악을 임포트 및 통합합니다. 성능 최적화도 함께 진행합니다.",
        "testStrategy": "자산 품질, 성능, 몰입감이 잘 구현되었는지 테스트합니다.",
        "priority": "low",
        "dependencies": [
          3,
          15
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "게임 최적화 및 마무리",
        "description": "게임 성능을 최적화하고 모든 기능을 마무리합니다.",
        "details": "렌더링, 물리, 네트워킹을 프로파일링 및 최적화합니다. 버그 수정, UI 다듬기, 크로스플랫폼 호환성 확보까지 마무리합니다.",
        "testStrategy": "성능, 안정성, 플랫폼 호환성이 모두 충족되는지 테스트합니다.",
        "priority": "low",
        "dependencies": [
          13,
          16,
          17
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-01T07:02:44.267Z",
      "updated": "2025-07-01T07:02:44.267Z",
      "description": "마스터 컨텍스트용 태스크 목록"
    }
  }
}